# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: 'parameters.yaml' }

parameters:
    locale: 'en'
    fos_oauth_server.server.class: App\Service\OAuth2

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
#        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,DataFixtures,Application}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    sensio_framework_extra.view.listener:
        alias: Sensio \ Bundle \ FrameworkExtraBundle \ EventListener \ TemplateListener

    fos_oauth_server.server:
        class: "%fos_oauth_server.server.class%"
        arguments: ["@fos_oauth_server.storage", "%fos_oauth_server.server.options%"]
        public: true

    # Mailer
    app.mailer.user.user_mailer:
        class: App\Service\Mailer\User\UserMailer
        public: true
        arguments:
            - '@mailer'
            - '@router'
            - '@twig'
            - from_email:
                  confirmation: "%fos_user.registration.confirmation.from_email%"
                  resetting: "%fos_user.resetting.email.from_email%"
              template:
                  confirmation: "%fos_user.registration.confirmation.template%"
                  resetting: "%fos_user.resetting.email.template%"
              url:
                  confirmation: "%user_url_confirmation%"
                  resetting: "%user_url_resetting%"

# Forms
    app.user.user_register.type.form:
        class: App\Form\Type\User\UserRegisterType
        arguments: ["@doctrine"]
        tags:
            - { name: form.type }

# Listener
    app.event.authorable.listener:
        class: App\EventListener\AuthorableEntityListener
        calls:
            - [setContainer, ['@service_container']]
        tags:
            - { name: doctrine.event_listener, event: prePersist}

# Sonata blocks
    sonata.block.service.blocks:
        class: App\Service\BlocksAdminService
        arguments: [ "sonata.block.service.blocks", '@templating',"@doctrine.orm.entity_manager" ]
        tags:
            - { name: sonata.block }

# Sonata Media
    Sonata\MediaBundle\Provider\ImageProvider: '@sonata.media.provider.image'

## Event Subscribers
#    app.event.subscriber.media_event_subscriber:
#        class: App\Event\Media\MediaSubscriber
#        arguments: [ "@doctrine.orm.entity_manager" ]
#        tags:
#            - { name: kernel.event_subscriber }

# Serializer
    app.media_serializer_subscriber:
        class: App\EventListener\Serializer\MediaSerializerSubscriber
        arguments: ['@sonata.media.provider.image']
        tags:
            - { name: jms_serializer.event_subscriber }

# Managers
    app.todo.todo.manager:
        class: App\Service\Manager\Todo\TodoManager
        arguments: ["@doctrine.orm.entity_manager", 'App\Entity\Todo\Todo']
        public: true

    app.user.user.manager:
        class: App\Service\Manager\User\UserManager
        arguments: ["@doctrine.orm.entity_manager", 'App\Entity\User\User', "@fos_user.user_manager"]
        public: true