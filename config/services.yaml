# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
imports:
    - { resource: 'parameters.yaml' }
parameters:
    locale: 'en'
#    fos_oauth_server.server.class: App\Service\OAuth2

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
#        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php,DataFixtures}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    sensio_framework_extra.view.listener:
        alias: Sensio \ Bundle \ FrameworkExtraBundle \ EventListener \ TemplateListener

    fos_oauth_server.server:
        class: "%fos_oauth_server.server.class%"
        arguments: ["@fos_oauth_server.storage", "%fos_oauth_server.server.options%"]
        public: true

#    Sonata\MediaBundle\Provider\ImageProvider: '@sonata.media.provider.image'

# Admin panel, Sonata
    admin.todo:
        class: App\Admin\TodoAdmin
        arguments: [~, App\Entity\Todo\Todo, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: Todo }

    admin.user:
        class: App\Admin\UserAdmin
        arguments: [~, App\Entity\User\User, ~]
        tags:
            - { name: sonata.admin, manager_type: orm, label: User }